def Node(x, l, r) = {
    "type": "Node",
    "data": x,
    "left": l,
    "right": r
}

let Tip = {"type": "Tip"}

def leaf(x) =
    Node(x, Tip, Tip)

def bstAdd(d, n) =
    if n == Tip then
        leaf(d)
    else if d < n.data then
        Node(n.data, bstAdd(d, n.left), n.right)
    else
        Node(n.data, n.left, bstAdd(d, n.right))

def inOrder(node) =
    match node
    case {"type": "Tip"} => []
    case {"type": "Node", left, right, data} =>
        inOrder(left) ++ [data] ++ inOrder(right)
    end

let root = foldRight(bstAdd, Tip, [4, 2, 1, 3, 6, 5, 7])

def _add(x, y) = x + y
def _mul(x, y) = x * y

in console.log(inOrder(root))
