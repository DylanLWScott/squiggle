"// TODO: Add arity checking.\n// TODO: Add type checking.\n\nvar undefined = void 0;\nvar global = (1, eval)(\"this\");\nvar print = function(x) { return sqgl$$log(x); };\nvar not = function(x) { return !x; };\n// TODO: Polyfill.\nvar is = Object.is;\nvar isObject = function(x) {\n    return x && typeof x === \"object\";\n};\nvar $lt = function(a, b) {\n    var ta = typeof a;\n    var tb = typeof b;\n    if (ta === tb && (ta === 'string' || ta === 'number')) {\n        return a < b;\n    }\n    throw new sqgl$$Error('incorrect argument types for <')\n};\nvar $gt = function(a, b) {\n    var ta = typeof a;\n    var tb = typeof b;\n    if (ta === tb && (ta === 'string' || ta === 'number')) {\n        return a > b;\n    }\n    throw new sqgl$$Error('incorrect argument types for >')\n};\nvar $lt$eq = function(a, b) {\n    return $lt(a, b) || a === b;\n};\nvar $gt$eq = function(a, b) {\n    return $gt(a, b) || a === b;\n};\nvar $bang$eq = function(a, b) {\n    return not($eq(a, b));\n};\nvar not = function(x) {\n    return !sqgl$$assertBoolean(x);\n};\nvar $pipe$gt = function(x, f) {\n    if (typeof f !== 'function') {\n        throw new sqgl$$Error('right-side not a function in |>, ' + f);\n    }\n    return f(x);\n};\nvar $eq = function recur(a, b) {\n    if (typeof a !== typeof b) {\n        return false;\n    }\n    if (a === b) {\n        return true;\n    }\n    // Check if both values are NaN.\n    if (a !== a && b !== b) {\n        return true;\n    }\n    if (sqgl$$isObject(a) && sqgl$$isObject(b)) {\n        // TODO: Remove duplicates.\n        var ks = sqgl$$keys(a).concat(sqgl$$keys(b)).sort();\n        return ks.every(function(k) {\n            return (\n                k in a &&\n                k in b &&\n                recur(a[k], b[k])\n            );\n        });\n    }\n    return false;\n};\nvar isNan = function(x) {\n    return x !== x;\n};\nvar $plus = function(a, b) {\n    if (typeof a === 'number' && typeof b === 'number') {\n        return a + b;\n    }\n    throw new sqgl$$Error('incorrect argument types for +');\n};\nvar $plus$plus = function(a, b) {\n    var A = Array.isArray;\n    var S = function(x) { return typeof x === 'string'; };\n    var aOk = A(a) && A(b);\n    var sOk = S(a) && S(b)\n    if (aOk || sOk) {\n        return a.concat(b);\n    }\n    throw new sqgl$$Error('incorrect argument types for ++');\n};\nvar $minus = function(a, b) {\n    return a - b;\n};\nvar $star = function(a, b) {\n    return a * b;\n};\nvar $slash = function(a, b) {\n    return a / b;\n};\nvar map = function(f, xs) {\n    return xs.map(function(x) {\n        return f(x);\n    });\n};\nvar join = function(separator, items) {\n    return [].join.call(items, separator);\n};\nvar foldLeft = function(f, z, xs) {\n    xs.forEach(function(x) {\n        z = f(z, x);\n    });\n    return z;\n};\nvar fold = foldLeft;\nvar isEmpty = function(xs) {\n    return xs.length === 0;\n};\nvar head = function(xs) {\n    if (!isEmpty(xs)) {\n        return xs[0];\n    }\n    throw new sqgl$$Error('cannot get head of empty list');\n};\nvar tail = function(xs) {\n    return [].slice.call(xs, 1);\n};\nvar reduce = function(f, xs) {\n    return foldLeft(f, head(xs), tail(xs));\n};\nvar foldRight = function(f, z, xs) {\n    return foldLeft(flip(f), z, reverse(xs));\n};\nvar reverse = function(xs) {\n    return toArray(xs).reverse();\n};\nvar toArray = function(xs) {\n    return [].slice.call(xs);\n};\nvar flip = function(f) {\n    return function(x, y) {\n        return f(y, x);\n    };\n};\nvar toString = function(x) {\n    if (x) {\n        if ('toString' in x) {\n            return x.toString();\n        } else {\n            return '{WEIRD_OBJECT}';\n        }\n    } else {\n        return '' + x;\n    }\n};\nvar get = function(k, obj) {\n    if (obj !== null && obj !== undefined k in obj) {\n        return obj[k];\n    }\n    throw new sqgl$$Error('key ' + k + ' not in ' + toString(obj));\n};\nvar set = function(k, v, obj) {\n    if (obj === null || typeof obj !== 'object') {\n        throw new sqgl$$Error('cannot set ' + k + ' on ' + toString(obj));\n    }\n    if (sqgl$$isFrozen(obj)) {\n        throw new sqgl$$Error('cannot set ' + k + ' on frozen object');\n    }\n    obj[k] = v;\n    return obj;\n};\nvar methodGet = function(method, obj) {\n    return obj[method].bind(obj);\n};\nvar methodCall = function(method, obj, args) {\n    return obj[method].apply(obj, args);\n};\nvar update = function(a, b) {\n    var c = Object.create(Object.getPrototypeOf(a));\n    Object.keys(a).forEach(function(k) { c[k] = a[k]; });\n    Object.keys(b).forEach(function(k) { c[k] = b[k]; });\n    return sqgl$$freeze(c);\n};\nvar $tilde = update;\nvar sqgl$$object = function(data) {\n    if (!sqgl$$isArray(data)) {\n        throw new sqgl$$Error(\n            'objects can only be constructed from an array'\n        );\n    }\n    var obj = {};\n    var i = 0;\n    var n = data.length;\n    while (i < n) {\n        if (typeof data[i][0] !== \"string\") {\n            throw new sqgl$$Error(\n                \"object keys must be strings: \" + data[i]\n            );\n        }\n        obj[data[i][0]] = data[i][1];\n        i++;\n    }\n    return sqgl$$freeze(obj);\n};\nvar sqgl$$isObject = function(x) {\n    if (arguments.length !== 1) {\n        throw new sqgl$$Error(\n            'wrong number of arguments to sqgl$$isObject'\n        );\n    }\n    return x !== null && typeof x === 'object';\n};\nvar sqgl$$assertBoolean = function(x) {\n    if (typeof x !== 'boolean') {\n        throw new sqgl$$Error('not a boolean: ' + toString(x));\n    }\n    return x;\n};\nvar sqgl$$update = update;\nvar sqgl$$isObject = isObject;\nvar sqgl$$isFrozen = Object.isFrozen;\nvar sqgl$$freeze = Object.freeze;\nvar sqgl$$create = Object.create;\nvar sqgl$$is = is;\nvar sqgl$$isArray = Array.isArray;\nvar sqgl$$keys = Object.keys;\nvar sqgl$$get = get;\nvar sqgl$$methodGet = methodGet;\nvar sqgl$$methodCall = methodCall;\nvar sqgl$$Error = Error;\nvar sqgl$$customLogger = null;\nvar sqgl$$global = global;\nvar sqgl$$log = function(x) {\n    if (sqgl$$customLogger) {\n        sqgl$$customLogger(x);\n    } else if (sqgl$$global.console && sqgl$$global.console.log) {\n        sqgl$$global.console.log(x);\n    }\n    return x;\n};\n"