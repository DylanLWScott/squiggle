module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleIndices = { Module: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          peg$FAILED,
          "export",
          { type: "literal", value: "export", description: "\"export\"" },
          function(e) { return ast.Module(e); },
          function(e) { return ast.Script(e); },
          ":set",
          { type: "literal", value: ":set", description: "\":set\"" },
          function(b) { return ast.ReplBinding(b); },
          ":help",
          { type: "literal", value: ":help", description: "\":help\"" },
          function() { return ast.ReplHelp(); },
          ":quit",
          { type: "literal", value: ":quit", description: "\":quit\"" },
          function() { return ast.ReplQuit(); },
          function(e) { return ast.ReplExpression(e); },
          "do",
          { type: "literal", value: "do", description: "\"do\"" },
          "{",
          { type: "literal", value: "{", description: "\"{\"" },
          [],
          ";",
          { type: "literal", value: ";", description: "\";\"" },
          function(e) { return e; },
          "}",
          { type: "literal", value: "}", description: "\"}\"" },
          function(es) { return ast.Block(es); },
          "if",
          { type: "literal", value: "if", description: "\"if\"" },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          "else",
          { type: "literal", value: "else", description: "\"else\"" },
          function(p, t, f) { return ast.If(p, t, f); },
          "let",
          { type: "literal", value: "let", description: "\"let\"" },
          function(b, e) { return ast.Let(b, e); },
          "try",
          { type: "literal", value: "try", description: "\"try\"" },
          function(e) { return ast.Try(e); },
          "throw",
          { type: "literal", value: "throw", description: "\"throw\"" },
          function(e) { return ast.Throw(e); },
          "error",
          { type: "literal", value: "error", description: "\"error\"" },
          function(e) { return ast.Error(e); },
          "match",
          { type: "literal", value: "match", description: "\"match\"" },
          function(e, b) { return ast.Match(e, b); },
          "case",
          { type: "literal", value: "case", description: "\"case\"" },
          "=>",
          { type: "literal", value: "=>", description: "\"=>\"" },
          function(p, e) { return ast.MatchClause(p, e); },
          function(x) { return ast.MatchPatternLiteral(x); },
          function(i) { return ast.MatchPatternSimple(i); },
          "[",
          { type: "literal", value: "[", description: "\"[\"" },
          null,
          "]",
          { type: "literal", value: "]", description: "\"]\"" },
          function(ps) { return ast.MatchPatternArray(ps || []); },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          function(p) { return p; },
          "...",
          { type: "literal", value: "...", description: "\"...\"" },
          function(pps) { return pps; },
          function(ps, ppss) { return ast.MatchPatternArraySlurpy(ps, ppss); },
          function(pp) { return pp; },
          function(p, ps) { return cons(p, ps); },
          function(ps) { return ast.MatchPatternObject(ps || []); },
          ":",
          { type: "literal", value: ":", description: "\":\"" },
          function(k, v) { return ast.MatchPatternObjectPair(k, v); },
          function(i) {
                  return ast.MatchPatternObjectPair(
                      ast.String(i.data),
                      ast.MatchPatternSimple(i)
                  );
              },
          function(b2) { return b2; },
          function(b, bs) { return [b].concat(bs); },
          "=",
          { type: "literal", value: "=", description: "\"=\"" },
          function(i, e) { return ast.Binding(i, e); },
          "|>",
          { type: "literal", value: "|>", description: "\"|>\"" },
          "and",
          { type: "literal", value: "and", description: "\"and\"" },
          "or",
          { type: "literal", value: "or", description: "\"or\"" },
          ">=",
          { type: "literal", value: ">=", description: "\">=\"" },
          "<=",
          { type: "literal", value: "<=", description: "\"<=\"" },
          "<",
          { type: "literal", value: "<", description: "\"<\"" },
          ">",
          { type: "literal", value: ">", description: "\">\"" },
          "!=",
          { type: "literal", value: "!=", description: "\"!=\"" },
          "++",
          { type: "literal", value: "++", description: "\"++\"" },
          "~",
          { type: "literal", value: "~", description: "\"~\"" },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          "*",
          { type: "literal", value: "*", description: "\"*\"" },
          "/",
          { type: "literal", value: "/", description: "\"/\"" },
          function(o, b) { return [o, b]; },
          function(a, xs) { return lbo(a, xs); },
          ".",
          { type: "literal", value: ".", description: "\".\"" },
          function(i) { return i; },
          function(e, xs) { return foldLeft(ast.GetProperty, e, xs); },
          "::",
          { type: "literal", value: "::", description: "\"::\"" },
          function(e, xs) { return foldLeft(ast.GetMethod, e, xs); },
          function(i, xs) { return [i, xs || []]; },
          function(e, calls) {
                  return foldLeft(function(acc, call) {
                      return ast.CallMethod(acc, call[0], call[1]);
                  }, e, calls);
              },
          function(xs) { return xs || []; },
          function(e, calls) { return foldLeft(ast.Call, e, calls); },
          { type: "other", description: "literal" },
          function(i) { return ast.IdentifierExpression(i); },
          { type: "other", description: "function" },
          "fn",
          { type: "literal", value: "fn", description: "\"fn\"" },
          function(p, e) { return ast.Function(p || [], e); },
          function(p2) { return p2; },
          function(p, ps) { return [p].concat(ps); },
          function(i) { return ast.Parameter(i); },
          { type: "other", description: "parenthesized-expression" },
          { type: "other", description: "list" },
          function(xs) { return ast.List(xs || []); },
          function(e2) { return e2; },
          function(e, es) { return [e].concat(es); },
          { type: "other", description: "map" },
          function(xs) { return ast.Map(xs || []); },
          function(k, v) { return ast.Pair(k, v); },
          function(i) { return ast.Pair(ast.String(i.data), i); },
          "in",
          { type: "literal", value: "in", description: "\"in\"" },
          "true",
          { type: "literal", value: "true", description: "\"true\"" },
          "false",
          { type: "literal", value: "false", description: "\"false\"" },
          "undefined",
          { type: "literal", value: "undefined", description: "\"undefined\"" },
          "null",
          { type: "literal", value: "null", description: "\"null\"" },
          { type: "other", description: "identifier" },
          /^[_a-zA-Z]/,
          { type: "class", value: "[_a-zA-Z]", description: "[_a-zA-Z]" },
          /^[_a-zA-Z0-9]/,
          { type: "class", value: "[_a-zA-Z0-9]", description: "[_a-zA-Z0-9]" },
          function(i) {
                  return i === "if"
                      || i === "else"
                      || i === "let"
                      || i === "in"
                      || i === "do"
                      || i === "try"
                      || i === "throw"
                      || i === "error"
                      || i === "match"
                      || i === "case"
                      || i === "true"
                      || i === "false"
                      || i === "undefined"
                      || i === "null"
                      || i === "export";
              },
          void 0,
          function(i) { return ast.Identifier(i); },
          { type: "other", description: "true" },
          function() { return ast.True(); },
          { type: "other", description: "false" },
          function() { return ast.False(); },
          { type: "other", description: "undefined" },
          function() { return ast.Undefined(); },
          { type: "other", description: "null" },
          function() { return ast.Null(); },
          { type: "other", description: "number" },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          function(n) { return ast.Number(+n); },
          { type: "other", description: "string" },
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          /^[^"\n]/,
          { type: "class", value: "[^\"\\n]", description: "[^\"\\n]" },
          function(s) { return ast.String(s); },
          { type: "other", description: "whitespace" },
          /^[ \t]/,
          { type: "class", value: "[ \\t]", description: "[ \\t]" },
          { type: "other", description: "newline" },
          /^[\n]/,
          { type: "class", value: "[\\n]", description: "[\\n]" },
          { type: "other", description: "comment" },
          "#",
          { type: "literal", value: "#", description: "\"#\"" },
          { type: "any", description: "any character" }
        ],

        peg$bytecode = [
          peg$decode("!7Z+V$.!\"\"2!3\"+F%7Z+<%7#+2%7Z+(%4%6#%!!%$%#  $$#  $##  $\"#  \"#  *# \"7!"),
          peg$decode("!7Z+<$7#+2%7Z+(%4#6$#!!%$##  $\"#  \"#  "),
          peg$decode("!7Z+V$.%\"\"2%3&+F%7Z+<%74+2%7Z+(%4%6'%!!%$%#  $$#  $##  $\"#  \"#  *\xA5 \"!7Z+A$.(\"\"2(3)+1%7Z+'%4#6*# %$##  $\"#  \"#  *v \"!7Z+A$.+\"\"2+3,+1%7Z+'%4#6-# %$##  $\"#  \"#  *G \"!7Z+<$7#+2%7Z+(%4#6.#!!%$##  $\"#  \"#  "),
          peg$decode("!./\"\"2/30+\xD3$7Z+\xC9%.1\"\"2132+\xB9%7Z+\xAF% 3!7#+B$.4\"\"2435+2%7Z+(%4#66#!\"%$##  $\"#  \"#  +P$,M&!7#+B$.4\"\"2435+2%7Z+(%4#66#!\"%$##  $\"#  \"#  \"\"\"  +B%.7\"\"2738+2%7Z+(%4'69'!\"%$'#  $&#  $%#  $$#  $##  $\"#  \"#  *# \"7$"),
          peg$decode("!.:\"\"2:3;+\xA0$7Z+\x96%.<\"\"2<3=+\x86%7Z+|%7;+r%.>\"\"2>3?+b%7Z+X%7#+N%.@\"\"2@3A+>%7Z+4%7#+*%4+6B+#&# %$+#  $*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  *# \"7%"),
          peg$decode("!.C\"\"2C3D+{$7Z+q%.<\"\"2<3=+a%7Z+W%73+M%.>\"\"2>3?+=%7Z+3%7#+)%4(6E(\"# %$(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  *\xB9 \"!.F\"\"2F3G+<$7Z+2%7#+(%4#6H#! %$##  $\"#  \"#  *\x89 \"!.I\"\"2I3J+<$7Z+2%7#+(%4#6K#! %$##  $\"#  \"#  *Y \"!.L\"\"2L3M+<$7Z+2%7#+(%4#6N#! %$##  $\"#  \"#  *) \"7&*# \"7;"),
          peg$decode("!.O\"\"2O3P+\xBE$7Z+\xB4%.<\"\"2<3=+\xA4%7Z+\x9A%7#+\x90%.>\"\"2>3?+\x80%7Z+v%.1\"\"2132+f%7Z+\\% 37'+&$,#&7'\"\"\"  +C%.7\"\"2738+3%7Z+)%4,6Q,\"'\"%$,#  $+#  $*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!.R\"\"2R3S+a$7Z+W%7(+M%.T\"\"2T3U+=%7Z+3%7#+)%4&6V&\"# %$&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("7)*# \"7*"),
          peg$decode("7+*# \"7,"),
          peg$decode("7-*# \"70"),
          peg$decode("!7X*) \"7Y*# \"7W+' 4!6W!! %"),
          peg$decode("!7R+' 4!6X!! %"),
          peg$decode("7.*m \"!.Y\"\"2Y3Z+\\$7Z+R%7/*# \" [+B%.\\\"\"2\\3]+2%7Z+(%4%6^%!\"%$%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!.Y\"\"2Y3Z+\xE7$7Z+\xDD% 3!7(+B$._\"\"2_3`+2%7Z+(%4#6a#!\"%$##  $\"#  \"#  ,M&!7(+B$._\"\"2_3`+2%7Z+(%4#6a#!\"%$##  $\"#  \"#  \"+w%!.b\"\"2b3c+<$7Z+2%7(+(%4#6d#! %$##  $\"#  \"#  +C%.\\\"\"2\\3]+3%7Z+)%4&6e&\"#\"%$&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!7(+\x8F$ 3!._\"\"2_3`+<$7Z+2%7(+(%4#6f#! %$##  $\"#  \"#  ,M&!._\"\"2_3`+<$7Z+2%7(+(%4#6f#! %$##  $\"#  \"#  \"+)%4\"6g\"\"! %$\"#  \"#  "),
          peg$decode("!.1\"\"2132+\\$7Z+R%71*# \" [+B%.7\"\"2738+2%7Z+(%4%6h%!\"%$%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!72+\x8F$ 3!._\"\"2_3`+<$7Z+2%72+(%4#6f#! %$##  $\"#  \"#  ,M&!._\"\"2_3`+<$7Z+2%72+(%4#6f#! %$##  $\"#  \"#  \"+)%4\"6g\"\"! %$\"#  \"#  "),
          peg$decode("!7Y+M$.i\"\"2i3j+=%7Z+3%7(+)%4$6k$\"# %$$#  $##  $\"#  \"#  */ \"!7R+' 4!6l!! %"),
          peg$decode("!74+\x8F$ 3!._\"\"2_3`+<$7Z+2%74+(%4#6m#! %$##  $\"#  \"#  ,M&!._\"\"2_3`+<$7Z+2%74+(%4#6m#! %$##  $\"#  \"#  \"+)%4\"6n\"\"! %$\"#  \"#  "),
          peg$decode("!7R+M$.o\"\"2o3p+=%7Z+3%7#+)%4$6q$\"# %$$#  $##  $\"#  \"#  "),
          peg$decode(".r\"\"2r3s"),
          peg$decode(".t\"\"2t3u*) \".v\"\"2v3w"),
          peg$decode(".x\"\"2x3y*Y \".z\"\"2z3{*M \".|\"\"2|3}*A \".~\"\"2~3*5 \".o\"\"2o3p*) \".\x80\"\"2\x803\x81"),
          peg$decode(".\x82\"\"2\x823\x83*) \".\x84\"\"2\x843\x85"),
          peg$decode(".\x86\"\"2\x863\x87*) \".\x88\"\"2\x883\x89"),
          peg$decode(".\x8A\"\"2\x8A3\x8B*) \".\x8C\"\"2\x8C3\x8D"),
          peg$decode("!7<+\x85$ 3!75+=$7Z+3%7<+)%4#6\x8E#\"\" %$##  $\"#  \"#  ,H&!75+=$7Z+3%7<+)%4#6\x8E#\"\" %$##  $\"#  \"#  \"+)%4\"6\x8F\"\"! %$\"#  \"#  "),
          peg$decode("!7=+\x85$ 3!76+=$7Z+3%7=+)%4#6\x8E#\"\" %$##  $\"#  \"#  ,H&!76+=$7Z+3%7=+)%4#6\x8E#\"\" %$##  $\"#  \"#  \"+)%4\"6\x8F\"\"! %$\"#  \"#  "),
          peg$decode("!7>+\x85$ 3!77+=$7Z+3%7>+)%4#6\x8E#\"\" %$##  $\"#  \"#  ,H&!77+=$7Z+3%7>+)%4#6\x8E#\"\" %$##  $\"#  \"#  \"+)%4\"6\x8F\"\"! %$\"#  \"#  "),
          peg$decode("!7?+\x85$ 3!78+=$7Z+3%7?+)%4#6\x8E#\"\" %$##  $\"#  \"#  ,H&!78+=$7Z+3%7?+)%4#6\x8E#\"\" %$##  $\"#  \"#  \"+)%4\"6\x8F\"\"! %$\"#  \"#  "),
          peg$decode("!7@+\x85$ 3!79+=$7Z+3%7@+)%4#6\x8E#\"\" %$##  $\"#  \"#  ,H&!79+=$7Z+3%7@+)%4#6\x8E#\"\" %$##  $\"#  \"#  \"+)%4\"6\x8F\"\"! %$\"#  \"#  "),
          peg$decode("!7A+\x85$ 3!7:+=$7Z+3%7A+)%4#6\x8E#\"\" %$##  $\"#  \"#  ,H&!7:+=$7Z+3%7A+)%4#6\x8E#\"\" %$##  $\"#  \"#  \"+)%4\"6\x8F\"\"! %$\"#  \"#  "),
          peg$decode("!7B+\u0123$ 3!.\x90\"\"2\x903\x91+<$7Z+2%7R+(%4#6\x92#! %$##  $\"#  \"#  *g \"!.Y\"\"2Y3Z+V$7Z+L%7#+B%.\\\"\"2\\3]+2%7Z+(%4%6\x92%!\"%$%#  $$#  $##  $\"#  \"#  ,\x97&!.\x90\"\"2\x903\x91+<$7Z+2%7R+(%4#6\x92#! %$##  $\"#  \"#  *g \"!.Y\"\"2Y3Z+V$7Z+L%7#+B%.\\\"\"2\\3]+2%7Z+(%4%6\x92%!\"%$%#  $$#  $##  $\"#  \"#  \"+)%4\"6\x93\"\"! %$\"#  \"#  "),
          peg$decode("!7C+\x8F$ 3!.\x94\"\"2\x943\x95+<$7Z+2%7R+(%4#6\x92#! %$##  $\"#  \"#  ,M&!.\x94\"\"2\x943\x95+<$7Z+2%7R+(%4#6\x92#! %$##  $\"#  \"#  \"+)%4\"6\x96\"\"! %$\"#  \"#  "),
          peg$decode("!7D+\u0119$ 3!.\x90\"\"2\x903\x91+\x81$7Z+w%7R+m%.<\"\"2<3=+]%7Z+S%7M*# \" [+C%.>\"\"2>3?+3%7Z+)%4(6\x97(\"%\"%$(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  ,\x92&!.\x90\"\"2\x903\x91+\x81$7Z+w%7R+m%.<\"\"2<3=+]%7Z+S%7M*# \" [+C%.>\"\"2>3?+3%7Z+)%4(6\x97(\"%\"%$(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  \"+)%4\"6\x98\"\"! %$\"#  \"#  "),
          peg$decode("!7E+\xCF$ 3!.<\"\"2<3=+\\$7Z+R%7M*# \" [+B%.>\"\"2>3?+2%7Z+(%4%6\x99%!\"%$%#  $$#  $##  $\"#  \"#  ,m&!.<\"\"2<3=+\\$7Z+R%7M*# \" [+B%.>\"\"2>3?+2%7Z+(%4%6\x99%!\"%$%#  $$#  $##  $\"#  \"#  \"+)%4\"6\x9A\"\"! %$\"#  \"#  "),
          peg$decode("7F*; \"7L*5 \"7N*/ \"7H*) \"7G*# \"7K"),
          peg$decode("87X*; \"7Y*5 \"7S*/ \"7T*) \"7U*# \"7V9*\" 3\x9B"),
          peg$decode("!7R+' 4!6\x9C!! %"),
          peg$decode("8!.\x9E\"\"2\x9E3\x9F+\x81$7Z+w%.<\"\"2<3=+g%7Z+]%7I*# \" [+M%.>\"\"2>3?+=%7Z+3%7#+)%4(6\xA0(\"# %$(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  9*\" 3\x9D"),
          peg$decode("!7J+\x8F$ 3!._\"\"2_3`+<$7Z+2%7J+(%4#6\xA1#! %$##  $\"#  \"#  ,M&!._\"\"2_3`+<$7Z+2%7J+(%4#6\xA1#! %$##  $\"#  \"#  \"+)%4\"6\xA2\"\"! %$\"#  \"#  "),
          peg$decode("!7R+' 4!6\xA3!! %"),
          peg$decode("8!.<\"\"2<3=+V$7Z+L%7#+B%.>\"\"2>3?+2%7Z+(%4%66%!\"%$%#  $$#  $##  $\"#  \"#  9*\" 3\xA4"),
          peg$decode("8!.Y\"\"2Y3Z+\\$7Z+R%7M*# \" [+B%.\\\"\"2\\3]+2%7Z+(%4%6\xA6%!\"%$%#  $$#  $##  $\"#  \"#  9*\" 3\xA5"),
          peg$decode("!7#+\x8F$ 3!._\"\"2_3`+<$7Z+2%7#+(%4#6\xA7#! %$##  $\"#  \"#  ,M&!._\"\"2_3`+<$7Z+2%7#+(%4#6\xA7#! %$##  $\"#  \"#  \"+)%4\"6\xA8\"\"! %$\"#  \"#  "),
          peg$decode("8!.1\"\"2132+\\$7Z+R%7O*# \" [+B%.7\"\"2738+2%7Z+(%4%6\xAA%!\"%$%#  $$#  $##  $\"#  \"#  9*\" 3\xA9"),
          peg$decode("!7P+\x8F$ 3!._\"\"2_3`+<$7Z+2%7P+(%4#6\xA1#! %$##  $\"#  \"#  ,M&!._\"\"2_3`+<$7Z+2%7P+(%4#6\xA1#! %$##  $\"#  \"#  \"+)%4\"6\xA2\"\"! %$\"#  \"#  "),
          peg$decode("!7#+M$.i\"\"2i3j+=%7Z+3%7#+)%4$6\xAB$\"# %$$#  $##  $\"#  \"#  */ \"!7R+' 4!6\xAC!! %"),
          peg$decode(".:\"\"2:3;*\xC5 \".@\"\"2@3A*\xB9 \".C\"\"2C3D*\xAD \".\xAD\"\"2\xAD3\xAE*\xA1 \"./\"\"2/30*\x95 \".F\"\"2F3G*\x89 \".I\"\"2I3J*} \".L\"\"2L3M*q \".O\"\"2O3P*e \".R\"\"2R3S*Y \".\xAF\"\"2\xAF3\xB0*M \".\xB1\"\"2\xB13\xB2*A \".\xB3\"\"2\xB33\xB4*5 \".\xB5\"\"2\xB53\xB6*) \".!\"\"2!3\""),
          peg$decode("8!!!0\xB8\"\"1!3\xB9+A$ 30\xBA\"\"1!3\xBB,)&0\xBA\"\"1!3\xBB\"+#%'\"%$\"#  \"#  +! (%+I$7Z+?%56\xBC !!)##\"  \" \xBD+(%4#6\xBE#!\"%$##  $\"#  \"#  9*\" 3\xB7"),
          peg$decode("8!.\xAF\"\"2\xAF3\xB0+1$7Z+'%4\"6\xC0\" %$\"#  \"#  9*\" 3\xBF"),
          peg$decode("8!.\xB1\"\"2\xB13\xB2+1$7Z+'%4\"6\xC2\" %$\"#  \"#  9*\" 3\xC1"),
          peg$decode("8!.\xB3\"\"2\xB33\xB4+1$7Z+'%4\"6\xC4\" %$\"#  \"#  9*\" 3\xC3"),
          peg$decode("8!.\xB5\"\"2\xB53\xB6+1$7Z+'%4\"6\xC6\" %$\"#  \"#  9*\" 3\xC5"),
          peg$decode("7S*/ \"7T*) \"7U*# \"7V"),
          peg$decode("8!! 30\xC8\"\"1!3\xC9+,$,)&0\xC8\"\"1!3\xC9\"\"\"  +! (%+2$7Z+(%4\"6\xCA\"!!%$\"#  \"#  9*\" 3\xC7"),
          peg$decode("8!.\xCC\"\"2\xCC3\xCD+f$! 30\xCE\"\"1!3\xCF,)&0\xCE\"\"1!3\xCF\"+! (%+B%.\xCC\"\"2\xCC3\xCD+2%7Z+(%4$6\xD0$!\"%$$#  $##  $\"#  \"#  9*\" 3\xCB"),
          peg$decode(" 37[*) \"7\\*# \"7],/&7[*) \"7\\*# \"7]\""),
          peg$decode("8 30\xD2\"\"1!3\xD3+,$,)&0\xD2\"\"1!3\xD3\"\"\"  9*\" 3\xD1"),
          peg$decode("8 30\xD5\"\"1!3\xD6+,$,)&0\xD5\"\"1!3\xD6\"\"\"  9*\" 3\xD4"),
          peg$decode("8!.\xD8\"\"2\xD83\xD9+\x8F$ 3!!87\\9*$$\"\" \xBD\"#  +2$-\"\"1!3\xDA+#%'\"%$\"#  \"#  ,K&!!87\\9*$$\"\" \xBD\"#  +2$-\"\"1!3\xDA+#%'\"%$\"#  \"#  \"+-%7\\+#%'#%$##  $\"#  \"#  9*\" 3\xD7")
        ],

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$cache = {},
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      var key    = peg$currPos * 62 + index,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      function protect(object) {
        return Object.prototype.toString.apply(object) === "[object Array]" ? [] : object;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(protect(peg$consts[bc[ip + 1]]));
              ip += 2;
              break;

            case 1:
              stack.push(peg$currPos);
              ip++;
              break;

            case 2:
              stack.pop();
              ip++;
              break;

            case 3:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 4:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 5:
              stack.splice(-2, 1);
              ip++;
              break;

            case 6:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 7:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 8:
              stack.pop();
              stack.push(input.substring(stack[stack.length - 1], peg$currPos));
              ip++;
              break;

            case 9:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 10:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 11:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 12:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 16:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 17:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 18:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 19:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 20:
              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 21:
              peg$reportedPos = peg$currPos;
              ip++;
              break;

            case 22:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 23:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 24:
              peg$silentFails++;
              ip++;
              break;

            case 25:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: stack[0] };

      return stack[0];
    }


        // Yikes... what a horrible import path.
        var ast = require("../src/ast");

        function foldLeft(f, z, xs) {
            return xs.reduce(function(acc, x) {
                return f(acc, x);
            }, z);
        }

        function cons(x, xs) {
            return [x].concat(xs);
        }

        // Left-associative binary operator helper.
        function lbo(a, xs) {
            return foldLeft(function(acc, pair) {
                return ast.BinOp(ast.Operator(pair[0]), acc, pair[1]);
            }, a, xs);
        }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
